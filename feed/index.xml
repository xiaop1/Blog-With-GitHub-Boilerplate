<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>小皮的菜园子</title><link>/</link><description>厚积薄发。</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>${static_prefix}logo.png</url><title>小皮的菜园子</title><link>/</link></image><language>zh-CN</language><lastBuildDate>Tue, 25 Aug 2020 03:26:35 +0806</lastBuildDate><pubDate>Tue, 25 Aug 2020 03:26:35 +0806</pubDate><item><title>Mac效率工具Alfred实现OCR</title><link>/archives/alfred/</link><description>&lt;h2&gt;Alfred是什么&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;是macOS的应用程序启动器和生产力应用程序。在Mac上可以通过Alfred快捷的打开App、执行系统指令、执行脚本、快速的在想要的网站搜索关键词（如谷歌、百度、维基百科、淘宝等）。&lt;/p&gt;
&lt;p&gt;以上介绍的都是Alfred的基本功能，除此之外，它还可以编写Workflow来实现更多的功能。本文将介绍如何通过Workflow实现OCR文字识别，提高工作效率。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 79.7872340425532" data-width="600" data-height="376"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/085e4f7406381202c6d79c9e5c1bd80c.gif" alt="Alfred search" /&gt;&lt;figcaption&gt;Alfred search&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;基于Workflow的OCR文字识别&lt;/h2&gt;
&lt;h3&gt;首先下载Alfred&lt;/h3&gt;
&lt;p&gt;第一步&lt;a href="https://xclient.info/s/alfred.html"&gt;下载Alfred&lt;/a&gt;，确保其正常工作。&lt;/p&gt;
&lt;h3&gt;下载OCR Workflow&lt;/h3&gt;
&lt;p&gt;接着在Github上&lt;a href="https://github.com/oott123/alfred-clipboard-ocr"&gt;下载OCR Workflow&lt;/a&gt;，本Workflow为热心网友制作，可以按照其介绍的使用说明部署。&lt;/p&gt;
&lt;h3&gt;截图并调用Alfred实现OCR&lt;/h3&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 127.65957446808511" data-width="600" data-height="235"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/5853cda9e3e276a747eb5aaec87de957.gif" alt="Alfred OCR" /&gt;&lt;figcaption&gt;Alfred OCR&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要通过Alfred这款效率工具，在其基本功能的基础上介绍其基于Workflow文字识别的实现。通过筛选网上现有的Workflow，挑选出效果最好的一款，且其本身的使用说明已经比较详尽，按照其步骤操作基本可以实现其功能。&lt;/p&gt;
&lt;p&gt;基于此Workflow实现的文字OCR识别准确率高，并且能够识别换行，操作简单不用额外下载软件，并且完全免费，对标市面上已有的付费软件，使用体验优于付费软件。&lt;/p&gt;
</description><author>zch@began.me (小皮)</author><guid isPermaLink="true">/archives/alfred/</guid><pubDate>Tue, 31 Dec 2019 13:32:00 +0806</pubDate></item><item><title>Win下搭建Sublime的C语言环境</title><link>/archives/sublime/</link><description>&lt;h2&gt;Sublime安装&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt;是一款用于代码、标记和散文的精致文本编辑器。Sublime的安装可以在官网或者百度中搜索安装包，安装很简单（无需安装到C盘）。&lt;/p&gt;
&lt;p&gt;Sublime不仅可以用来当作文本编辑器，同时可以通过安装C、Python等语言的环境来当作简单的编译器来使用（不支持代码调试）。而且Sublime可以安装数以万计的插件，来提高工作效率。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 103.09278350515464" data-width="600" data-height="291"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/7c0f71d0da142d706f9f76c1d39f2269.gif" alt="介绍" /&gt;&lt;figcaption&gt;介绍&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;TDM-GCC安装&lt;/h2&gt;
&lt;p&gt;MinGW是Windows的Minimallist GNU的缩写，是用于本机Microsoft Windows应用程序的简约开发环境。&lt;/p&gt;
&lt;p&gt;网上常见的教程为使用MinGW环境，然而MinGW更新缓慢而且安装后可能出现问题，这里推荐使用&lt;a href="http://tdm-gcc.tdragon.net/download"&gt;TDM-GCC官网下载&lt;/a&gt;。（无需安装到C盘）&lt;/p&gt;
&lt;p&gt;安装后最重要的一步为配置系统变量，按照你所安装路径配置系统变量，配置过程如下图所示。配置后，在开始中输入CMD，在命令提示窗口执行&lt;code&gt;gcc --help&lt;/code&gt;，如果能看到编译环境的帮助页面说明配置成功。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 110.8108108108108" data-width="1640" data-height="740"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/bc3c2fb2d6bf962859aac7fc7c616618.png" alt="配置系统变量" /&gt;&lt;figcaption&gt;配置系统变量&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;Sublime配置&lt;/h2&gt;
&lt;p&gt;安装好C语言环境后，还有最后一步就是配置Build System，Sublime需要运行Build System才能执行代码。&lt;/p&gt;
&lt;p&gt;在工具栏找到&lt;code&gt;Tools-&amp;gt;Build System-&amp;gt;New Build System&lt;/code&gt;，将下面的代码复制到你新建的Build System中，保存为&lt;code&gt;c.sublime-build&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-Wall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}/${file_base_name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;file_regex&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;working_dir&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;selector&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;source.c, source.c++&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;encoding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cp936&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;variants&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-Wall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${file}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}/${file_base_name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}/${file_base_name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RunInCommand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-Wall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${file}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}/${file_base_name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${file_path}/${file_base_name} &amp;amp; echo.&amp;amp;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RunInShell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;shell_cmd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; start cmd /c &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;${file_path}/${file_base_name}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;amp;pause&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建一个C文件，然后保存后输入简单的代码，按CTRL+Shift+b，就会显示你将要用什么来编译它，如果你是按照我上面的代码配置的话，你将看到C-Run、C-RunInCommand、C-RunInShell其中你点C-Run，你就可向下图一样显示了。下次运行代码，你就可以按CTRL+b就可以运行了，这个是表示接着用上次编译方式进行。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 89.06542056074767" data-width="953" data-height="535"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/ddc7ba097fd051be8faed8cd8b8b7f5c.jpg" alt="成功运行" /&gt;&lt;figcaption&gt;成功运行&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本文通过说明在Win下如何搭建Sublime的C语言环境，介绍了一种轻量级编译代码的方式，通过这种方式不仅可以编译C语言，同理也可以编译Python等语言。同时借助其强大的插件，可以几乎替代代码编译器。&lt;/p&gt;
</description><author>zch@began.me (小皮)</author><guid isPermaLink="true">/archives/sublime/</guid><pubDate>Wed, 08 Jan 2020 22:12:00 +0806</pubDate></item><item><title>基于蓝牙的门锁改装</title><link>/archives/bluetooth-opendoor/</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;常进的实验室门采用NFC模块配合钥匙打开，但运气太差碰到了学校网络问题导致门卡授权失败无法开门，同时钥匙也由于常年不用而不翼而飞，平时进门就需要求助小伙伴而变得异常麻烦，所以寻求一个快捷、实用的门锁改装方法就提上了日程。&lt;/p&gt;
&lt;p&gt;在改装前曾&lt;strong&gt;多次&lt;/strong&gt;咨询过学校后勤，但大多时间都是推脱来逃避责任，如果想要更换锁芯更是需要&lt;strong&gt;300&lt;/strong&gt;元，这让我萌生了利用蓝牙来开门的想法，这样可以仅仅加入一个蓝牙控制模块即可，剩余的供电和电机控制部分都可以直接利用。&lt;/p&gt;
&lt;h2&gt;控制模块设计&lt;/h2&gt;
&lt;p&gt;首先为了控制门内的电机模块，所以需要拆解门锁了解其控制时序，拆解后锁内NFC控制模块如下图所示（板子竟然是&lt;strong&gt;2011&lt;/strong&gt;年做的，有年头了）。可以看出其外接引脚较少，包含供电、电机正反转引脚。通过万用表和示波器对其进行分析，得出NFC控制模块需&lt;strong&gt;5V&lt;/strong&gt;供电；模块在接收到开门指令后首先电机正转信号置高&lt;strong&gt;100ms&lt;/strong&gt;后置低，间隔&lt;strong&gt;8&lt;/strong&gt;秒后电机反转信号置高&lt;strong&gt;100ms&lt;/strong&gt;后置低。&lt;/p&gt;
&lt;p&gt;明白了NFC控制模块的控制时序后，就可以接管其控制权限，从而实现蓝牙控制。由于整个开门过程需要对电机进行开门与关门两步操作，同时还要接收来自蓝牙模块指令，所以采用MCU+蓝牙模块的方式进行控制。这里需要注意的是，电机的驱动至少需要&lt;strong&gt;100mA&lt;/strong&gt;的驱动电流，MCU的引脚无法提高这么高的驱动能力，故需将MCU引脚接到NFC模块上的驱动芯片前级。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 37.5" data-width="3024" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/fd92265e4b222994bab33c94fc6f37a6.jpg" alt="door-NFCModule" /&gt;&lt;figcaption&gt;door-NFCModule&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于之前未使用过蓝牙模块，故首先在某宝上先购买模块化组件进行拼装（如下图所示）。同时因为锁内空间有限，故模块的选取受限，筛选后选择了&lt;strong&gt;STM32F030F4&lt;/strong&gt;作为MCU，&lt;strong&gt;CC2541&lt;/strong&gt;作为蓝牙模块。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 37.5" data-width="3024" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/b9e3e63f4684dbf717ddc5e36bc4b9e5.jpg" alt="bluetooth-FirstTry" /&gt;&lt;figcaption&gt;bluetooth-FirstTry&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;作为第一次实验效果还不错，板子在接收到开门指令后可以正常开门，且从外面看起来锁的外观无任何变化，至此已经完成了初步实验，基本满足预期设计指标，开门问题得到了解决。&lt;/p&gt;
&lt;p&gt;但这里还有一个问题需要解决——&lt;strong&gt;功耗&lt;/strong&gt;。两个模块工作时的电流为&lt;strong&gt;40mA&lt;/strong&gt;，功耗惊人的高，模块仅能持续工作10天。原因是两个模块都未开启低功耗模式，且外围电路会存在损耗，故需对目前设计进行优化以降低功耗。&lt;/p&gt;
&lt;h2&gt;控制模块设计优化&lt;/h2&gt;
&lt;p&gt;模块设计优化需做两个工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;精简模块，进一步缩小模块尺寸；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;降低功耗，使得模块能够持续工作1年以上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优化后的设计，将MCU与蓝牙模块集成在一块PCB上，同时外围电路去掉了无用的器件，在缩小模块尺寸的基础上降低了模块的功耗，优化后的模块工作电流仅为&lt;strong&gt;400uA&lt;/strong&gt;，基本满足优化的设计指标。设计图与实物图如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;figure class="pswp-item" style="flex: 50.0" data-width="1180" data-height="1180"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/a9493e4d261abf521cbacbccc895cfa8.jpg" alt="bluetooth-SecTry-PCB" /&gt;&lt;figcaption&gt;bluetooth-SecTry-PCB&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure class="pswp-item" style="flex: 37.5" data-width="3024" data-height="4032"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/7401d80b9ddcbf84aaee4460680e8d42.jpg" alt="bluetooth-SecTry" /&gt;&lt;figcaption&gt;bluetooth-SecTry&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;由NFC的授权失败到基于蓝牙的门锁改装，前后经历了两个周末，利用周末的碎片时间对蓝牙与低功耗的研究与实践，终于在可用性和持续性的前提下满足了开门的需求。在整个实践过程中，开始以为这是一个很简单的送分题，没想到最后在低功耗的问题上研究了几个小时，导致现在已经将目标瞄准了TI-CC2640，由于这款蓝牙芯片本身集成ARM芯片，能够实现单个蓝牙芯片替代目前所设计模块。（&lt;del&gt;计划年后对模块进行第二次优化，将功耗降低至&lt;strong&gt;100uA&lt;/strong&gt;以下&lt;/del&gt;）&lt;/p&gt;
</description><author>zch@began.me (小皮)</author><guid isPermaLink="true">/archives/bluetooth-opendoor/</guid><pubDate>Sat, 25 Jan 2020 16:00:00 +0806</pubDate></item><item><title>效率工具合集及最近的生活</title><link>/archives/tools-collection/</link><description>&lt;h2&gt;工具列表&lt;/h2&gt;
&lt;p&gt;平时搬砖时总会想如何简化工作流程提升工作效率，这一想法促使我不知疲倦日以继夜的发掘小而精的&lt;strong&gt;Mac&lt;/strong&gt;（或跨平台）效率工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ripperhe/Bob"&gt;Bob&lt;/a&gt; Mac下全域划词翻译工具，支持截图翻译&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lbj96347/auto-caption-mac"&gt;AutoCaption&lt;/a&gt; Mac下调用Siri为视频生成字幕，支持英语、普通话和粤语&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xjbeta/iina-plus"&gt;iina+&lt;/a&gt; Mac下通过调用iina播放器观看多平台直播，有效避免浏览器观看直播内存占用过高问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://automeris.io/WebPlotDigitizer/"&gt;WebPlotDigitizer&lt;/a&gt; 多平台下对可视化数据图表进行逆向操作获取数据&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/YaoZeyuan/zhihuhelp"&gt;知乎助手&lt;/a&gt; 多平台下爬取知乎数据并制作成epub格式电子书&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.selenium.dev/downloads/"&gt;Selenium&lt;/a&gt; Python下自动化工具&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm"&gt;uBlock Origin&lt;/a&gt; Chrome上最好用的广告屏蔽及元素过滤插件（需科学上网下载）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://greasyfork.org/zh-CN"&gt;Tempermonkey&lt;/a&gt; Chrome上最好用的Js脚本插件&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dataabc/weiboSpider"&gt;微博爬虫&lt;/a&gt; Python下爬取微博用户数据&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MustangYM/WeChatExtension-ForMac"&gt;微信助手&lt;/a&gt; Mac下多功能插件，可防撤回自动回复&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PS&lt;/h2&gt;
&lt;p&gt;最近因为疫情宅家，导致之前立下的Flag都被暂时搁浅，不过值得欣慰的是有更多的时间捣鼓自己喜欢的事情，学习了许多小技巧新知识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] 熟悉Linux命令搭建了坚固的梯子（Doge）来科学上网&lt;/li&gt;
&lt;li&gt;[x] 将一些重复性工作移植到Telegram让效率爆炸（微信能有电报一半好用就好了）&lt;/li&gt;
&lt;li&gt;[x] 刷完了HDLBits上的Verilog题&lt;del&gt;提升搬砖效率&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;[x] 缓慢但持续系统的学习电磁学丰富原理性知识&lt;/li&gt;
&lt;li&gt;[x] 坚持Keep锻炼结合控制碳水摄入使体重和体脂下降（重新拥有了腹肌）&lt;/li&gt;
&lt;li&gt;[x] 发现了Youtube上优质Math、Electronic频道（Fourier transform讲的太好了）&lt;/li&gt;
&lt;li&gt;[ ] 开学前一篇发明专利、一篇Journal of Sensor&lt;/li&gt;
&lt;li&gt;[ ] 优化重构开锁器设计使功耗大幅降低（目前拟采用霍尔传感器TLE4913）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;center&gt;&lt;b&gt;Off The Wall&lt;/b&gt;&lt;/center&gt;&lt;p&gt;&lt;figure class="pswp-item" style="flex: 88.88888888888889" data-width="2208" data-height="1242"&gt;&lt;img src="https://cdn.jsdelivr.net/gh/xiaop1/Blog-With-GitHub-Boilerplate@gh-pages/archives/assets/04ff43da4a0f23b21b993565f94b51e7.jpg" alt="Ollie" /&gt;&lt;figcaption&gt;Ollie&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
</description><author>zch@began.me (小皮)</author><guid isPermaLink="true">/archives/tools-collection/</guid><pubDate>Mon, 01 Jun 2020 11:00:00 +0806</pubDate></item></channel></rss>